appscript của tôi tên là ZaloMessageProcessor
với các file
Config
// Chứa tất cả các cấu hình toàn cục
const CONFIG = {
  SHEET_NAME: "Thongtin",
  COLUMNS: {
    ID_TIME: 1,
    TIMESTAMP: 2,
    DISPLAY_TIME: 3,
    NAME: 4,
    CONTENT: 5,
    HAS_ORIGINAL_TIME: 6,
    PHONE_NUMBER: 7,
    MUA_3S: 8,
    BAN_3S: 9,
    MUA_4S: 10,
    BAN_4S: 11,
    GIA_THE_GIOI: 12,
    TY_GIA: 13
  },
    PROPERTIES: {
    LAST_ID_TIME: 'LAST_ID_TIME'  // Thêm key để lưu ID_TIME cuối
  }
};

file DataProcessor
function debugSheetInfo() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(CONFIG.SHEET_NAME);
  
  if (!sheet) {
    console.log('Danh sách tất cả sheets:');
    ss.getSheets().forEach(s => console.log(s.getName()));
    throw new Error(`Không tìm thấy sheet "${CONFIG.SHEET_NAME}"`);
  }
  
  console.log(`Đã tìm thấy sheet "${CONFIG.SHEET_NAME}"`);
  console.log(`Số hàng: ${sheet.getLastRow()}`);
  console.log(`Số cột: ${sheet.getLastColumn()}`);
  return sheet;
}

function extractPhoneNumber(content) {
  if (!content || typeof content !== 'string') {
    console.log('Content không phải là string:', content);
    return '-';
  }
  
  try {
    // Mẫu regex cho số điện thoại Việt Nam
    const phonePatterns = [
      /(?:0|\+84|84)(?:\d{9}|\d{10})/g,  // Tìm số điện thoại dạng 0xx, +84xx, 84xx
      /\d{10,11}/g  // Tìm chuỗi 10-11 số liên tiếp
    ];
    
    for (let pattern of phonePatterns) {
      const matches = content.match(pattern);
      if (matches && matches.length > 0) {
        let phone = matches[0];
        // Nếu số điện thoại bắt đầu bằng +84 hoặc 84, thay bằng 0
        if (phone.startsWith('+84')) {
          phone = '0' + phone.slice(3);
        } else if (phone.startsWith('84')) {
          phone = '0' + phone.slice(2);
        }
        // Nếu số điện thoại không bắt đầu bằng 0, thêm 0 vào đầu
        if (!phone.startsWith('0')) {
          phone = '0' + phone;
        }
        return phone;
      }
    }
    return '-';
  } catch (error) {
    console.error('Lỗi khi xử lý số điện thoại:', error);
    console.log('Content gây lỗi:', content);
    return '-';
  }
}

function extractPrice(content) {
  if (!content || typeof content !== 'string') return null;
  
  try {
    // Tìm các mẫu giá có thể có
    const priceRegex = /\b(\d{4})(?:[.,]\d+)?(?:\s*[-+]\s*\d+)?\b/g;
    let matches = [];
    let match;
    
    while ((match = priceRegex.exec(content)) !== null) {
      // Bỏ qua nếu số này là một phần của số điện thoại
      const beforeChar = content.charAt(match.index - 1);
      const afterChar = content.charAt(match.index + match[1].length);
      if (!/\d/.test(beforeChar) && !/\d/.test(afterChar)) {
        const price = parseInt(match[1]);
        // Chỉ lấy giá trong khoảng hợp lệ (8000-8999)
        if (price >= 8000 && price <= 8999) {
          // Nếu có phép tính
          if (content.substring(match.index + match[1].length).match(/^\s*[-+]\s*\d+/)) {
            const calculation = content.substring(match.index).match(/\d{4}\s*([-+])\s*(\d+)/);
            if (calculation) {
              const operator = calculation[1];
              const adjustment = parseInt(calculation[2]);
              const finalPrice = operator === '+' ? 
                price + adjustment : 
                price - adjustment;
              matches.push(finalPrice.toString());
            }
          } else {
            matches.push(match[1]);
          }
        }
      }
    }
    
    return matches[0] || null;
  } catch (error) {
    console.error('Lỗi khi trích xuất giá:', error);
    return null;
  }
}

function classifyMua3s(content) {
  if (typeof content !== 'string') return false;
  // Mở rộng mẫu để bắt thêm các biến thể
  return /\b(?:mua|cần|cần mua|em mua|e mua).*(?:3s|pk3|pk 3)\b|(?:3s|pk3|pk 3).*\bmua\b/i.test(content) &&
         !content.toLowerCase().includes('ai mua') &&
         !content.toLowerCase().includes('ai có mua');
}

function classifyBan3s(content) {
  if (typeof content !== 'string') return false;
  // Mở rộng mẫu để bắt thêm các biến thể
  return /\b(?:ban|bán|bán gấp|cần bán|e bán|em bán).*(?:3s|pk3|pk 3)\b|(?:3s|pk3|pk 3).*\b(?:ban|bán)\b/i.test(content) &&
         !content.toLowerCase().includes('ai bán') &&
         !content.toLowerCase().includes('cần ai bán');
}

function classifyMua4s(content) {
  if (typeof content !== 'string') return false;
  
  // Chuẩn hóa nội dung để xử lý
  const normalizedContent = content.toLowerCase();
  
  // Kiểm tra các trường hợp không hợp lệ
  if (normalizedContent.includes('ai mua') || 
      normalizedContent.includes('ai có mua') ||
      normalizedContent.includes('anh em nào mua')) {
    return false;
  }
  
  // Mở rộng mẫu để bắt các trường hợp khác nhau
  const buyPatterns = [
    /\b(?:mua|cần|cần mua|em mua|e mua)\s*(?:4s|pk4s?|pk\s*4s?|4\s*số|4so|4\s*so)\b/i,
    /\b(?:4s|pk4s?|pk\s*4s?|4\s*số|4so|4\s*so)\s*(?:mua|cần|cần mua|em mua|e mua)\b/i,
    /\bmua.*pk\s*4\b/i,  // Mua pk4
    /\bmua.*\d+[-]?4s\b/i,  // Mua 2-4s, Mua 1 4s
    /\bcần mua.*\d+k\s*kp\s*4s\b/i,  // Cần mua 10k kp 4s
    /\bmua.*\d+k\s*pk\s*4s\b/i,  // Mua 3k pk 4s
    /\bmua.*\d+k4s\b/i,  // Mua 20k4s
    /\b(?:muốn mua|cần|e cần).*(?:4s|pk4s?|pk\s*4s?)\b/i,  // Muốn mua, cần, e cần
    /\bmua.*(?:1|một).*4spk\b/i,  // Mua 1 4spk
    /\bmình mua.*4s\s*pk\b/i  // Mình mua 4s pk
  ];
  
  return buyPatterns.some(pattern => pattern.test(content));
}

function classifyBan4s(content) {
  if (typeof content !== 'string') return false;
  
  // Chuẩn hóa nội dung để xử lý
  const normalizedContent = content.toLowerCase();
  
  // Kiểm tra các trường hợp không hợp lệ
  if (normalizedContent.includes('ai bán') || 
      normalizedContent.includes('cần ai bán') ||
      normalizedContent.includes('anh em nào bán')) {
    return false;
  }
  
  // Mở rộng mẫu để bắt các trường hợp khác nhau
  const sellPatterns = [
    /\b(?:ban|bán|bán gấp|cần bán|e bán|em bán)\s*(?:4s|pk4s?|pk\s*4s?|4\s*số|4so|4\s*so)\b/i,
    /\b(?:4s|pk4s?|pk\s*4s?|4\s*số|4so|4\s*so)\s*(?:ban|bán|bán gấp|cần bán|e bán|em bán)\b/i,
    /\bbán.*pk\s*4\b/i,  // Bán pk4
    /\bbán.*\d+[-]?4s\b/i,  // Bán 1-4s
    /\bbán.*\d+\s*chỉ\s*4s\b/i,  // Bán 69 chỉ 4s
    /\be\s*ban.*4spk\b/i,  // E ban 4spk
    /\bbán.*pk\s*4s\b/i,  // Bán pk 4s
    /\be\s*bán.*pk\s*4s\b/i,  // E bán pk 4s
    /\bbán.*(?:1|một).*4spk\b/i  // Bán 1 4spk
  ];
  
  return sellPatterns.some(pattern => pattern.test(content));
}

function processMessages() {
  console.log('Bắt đầu xử lý tin nhắn...');
  
  const sheet = debugSheetInfo();
  const lastRow = sheet.getLastRow();
  
  if (lastRow <= 1) {
    console.log('Không có dữ liệu để xử lý');
    return;
  }
  
  console.log(`Tìm thấy ${lastRow - 1} dòng dữ liệu cần xử lý`);
  
  // Lấy dữ liệu từ cột content
  const contentRange = sheet.getRange(2, CONFIG.COLUMNS.CONTENT, lastRow - 1, 1);
  const contentValues = contentRange.getValues();
  
  // Chuẩn bị mảng kết quả cho các cột mới
  const results = contentValues.map((row, index) => {
    try {
      const content = String(row[0]);
      
      // Log để debug
      console.log(`Đang xử lý dòng ${index + 2}, content:`, content);
      
      // Chuẩn bị mảng kết quả cho hàng hiện tại
      const resultRow = [];
      
      // Trích xuất số điện thoại
      const phoneNumber = extractPhoneNumber(content);
      resultRow.push(phoneNumber);
      
      // Phân loại giao dịch và trích xuất giá
      // Mua 3s
      if (classifyMua3s(content)) {
        const price = extractPrice(content);
        resultRow.push(price || '-');
      } else {
        resultRow.push('-');
      }
      
      // Bán 3s
      if (classifyBan3s(content)) {
        const price = extractPrice(content);
        resultRow.push(price || '-');
      } else {
        resultRow.push('-');
      }
      
      // Mua 4s
      if (classifyMua4s(content)) {
        const price = extractPrice(content);
        resultRow.push(price || '-');
      } else {
        resultRow.push('-');
      }
      
      // Bán 4s
      if (classifyBan4s(content)) {
        const price = extractPrice(content);
        resultRow.push(price || '-');
      } else {
        resultRow.push('-');
      }
      
      return resultRow;
    } catch (error) {
      console.error(`Lỗi khi xử lý dòng ${index + 2}:`, error);
      return ['-', '-', '-', '-', '-']; // Trả về giá trị mặc định nếu có lỗi
    }
  });
  
  // Cập nhật các cột kết quả
  const resultRange = sheet.getRange(2, CONFIG.COLUMNS.PHONE_NUMBER, lastRow - 1, 5);
  resultRange.setValues(results);
  
  console.log('Hoàn thành xử lý tin nhắn');
}

function processNewMessages() {
  const sheet = debugSheetInfo();
  const lastRow = sheet.getLastRow();
  
  const scriptProperties = PropertiesService.getScriptProperties();
  let lastProcessedRow = parseInt(scriptProperties.getProperty('LAST_PROCESSED_ROW')) || 1;
  
  if (lastRow > lastProcessedRow) {
    // Chỉ lấy dữ liệu từ cột content của các hàng mới
    const contentRange = sheet.getRange(lastProcessedRow + 1, CONFIG.COLUMNS.CONTENT, lastRow - lastProcessedRow, 1);
    const contentValues = contentRange.getValues();
    
    // Xử lý dữ liệu
    const results = contentValues.map((row, index) => {
      try {
        const content = String(row[0]);
        const resultRow = [];
        
        // Trích xuất số điện thoại
        const phoneNumber = extractPhoneNumber(content);
        resultRow.push(phoneNumber);
        
        // Phân loại và trích xuất giá
        if (classifyMua3s(content)) {
          const price = extractPrice(content);
          resultRow.push(price || '-');
        } else {
          resultRow.push('-');
        }
        
        if (classifyBan3s(content)) {
          const price = extractPrice(content);
          resultRow.push(price || '-');
        } else {
          resultRow.push('-');
        }
        
        if (classifyMua4s(content)) {
          const price = extractPrice(content);
          resultRow.push(price || '-');
        } else {
          resultRow.push('-');
        }
        
        if (classifyBan4s(content)) {
          const price = extractPrice(content);
          resultRow.push(price || '-');
        } else {
          resultRow.push('-');
        }
        
        return resultRow;
      } catch (error) {
        console.error(`Lỗi khi xử lý dòng mới ${lastProcessedRow + index + 1}:`, error);
        return ['-', '-', '-', '-', '-'];
      }
    });
    
    // Cập nhật chỉ các cột kết quả cho các hàng mới
    const resultRange = sheet.getRange(lastProcessedRow + 1, CONFIG.COLUMNS.PHONE_NUMBER, lastRow - lastProcessedRow, 5);
    resultRange.setValues(results);
    
    scriptProperties.setProperty('LAST_PROCESSED_ROW', lastRow.toString());
    console.log(`Đã xử lý ${lastRow - lastProcessedRow} hàng mới`);
  }
}
// Hàm phụ trợ để chuẩn hóa nội dung trước khi xử lý
function normalizeContent(content) {
  if (!content) return '';
  return content.toString()
    .toLowerCase()
    .replace(/\s+/g, ' ')
    .trim();
}

// Hàm kiểm tra xem một chuỗi có chứa từ khóa không mong muốn không
function hasUnwantedKeywords(content) {
  const unwantedKeywords = ['ai mua', 'ai bán', 'ai có mua', 'ai có bán', 'cần ai'];
  return unwantedKeywords.some(keyword => content.toLowerCase().includes(keyword));
}

// Hàm phụ trợ để kiểm tra định dạng giá
function isValidPrice(price) {
  return /^\d{4}$/.test(price.toString()) && parseInt(price) >= 8000 && parseInt(price) <= 9999;
}

file Menu
function createCustomMenu(ui) {
  ui.createMenu('Xử lý tin nhắn')
    .addItem('Xử lý tất cả tin nhắn', 'processMessages')
    .addItem('Xử lý tin nhắn mới', 'processRecentMessages')
    .addSeparator()
    .addSubMenu(ui.createMenu('Tự động hóa')
      .addItem('Bật tự động xử lý', 'enableAutomation')
      .addItem('Tắt tự động xử lý', 'disableAutomation')
      .addItem('Kiểm tra trạng thái', 'checkAutomationStatus'))
    .addSeparator()
    .addSubMenu(ui.createMenu('Giá vàng thế giới')
      .addItem('Cập nhật tất cả giá', 'processAllGoldPrices')
      .addItem('Test kết nối API', 'testApiConnection'))
    .addToUi();
}

file SpotwareService
class SpotwareService {
  constructor() {
    // Update CLIENT_ID và CLIENT_SECRET nếu cần
    this.CLIENT_ID = '12759_oQJD4HYzNNu1ePaAi0jGaySv6COAUDhoHcHWWBT19FlQTujOfX';
    this.CLIENT_SECRET = 'OC1cVihYULnQgUBlhozL9wdmgztQGmYhEthEHuXl3NSENpmDFI';
    // Thử với endpoint khác
    this.BASE_URL = 'https://ct-openapi.ctrader.com';  // URL mới
    this.SYMBOL = 'XAUUSD';  // Sửa format symbol
    this.CACHE_SHEET_NAME = 'PriceCache';
  }

  getAccessToken() {
    console.log('Đang lấy access token...');
    const url = `${this.BASE_URL}/v2/access_token`;  // Endpoint mới
    const formData = {
      'grant_type': 'client_credentials',
      'client_id': this.CLIENT_ID,
      'client_secret': this.CLIENT_SECRET
    };
    
    // Convert form data to URL encoded string
    const payload = Object.keys(formData)
      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(formData[key])}`)
      .join('&');

    const options = {
      'method': 'post',
      'contentType': 'application/x-www-form-urlencoded',
      'payload': payload,
      'muteHttpExceptions': true,
      'validateHttpsCertificates': true
    };

    try {
      console.log('Gửi request tới:', url);
      console.log('Payload:', payload);
      
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseText = response.getContentText();
      
      console.log('API Response status:', responseCode);
      console.log('API Response headers:', response.getAllHeaders());
      console.log('API Response body:', responseText);

      if (responseCode !== 200) {
        console.error(`API trả về status code ${responseCode}`);
        console.error('Response body:', responseText);
        return null;
      }

      try {
        const data = JSON.parse(responseText);
        if (data.access_token) {
          console.log('Lấy token thành công');
          return data.access_token;
        } else {
          console.error('Response không chứa access_token:', data);
          return null;
        }
      } catch (parseError) {
        console.error('Lỗi parse JSON:', parseError);
        console.error('Response text:', responseText);
        return null;
      }
    } catch (error) {
      console.error('Lỗi network:', error);
      console.error('Error details:', error.toString());
      return null;
    }
  }

  getPriceAtTimestamp(timestamp) {
    console.log('Lấy giá cho timestamp:', timestamp);
    const cachedPrice = this.getPriceFromCache(timestamp);
    if (cachedPrice) {
      console.log('Đã tìm thấy giá trong cache:', cachedPrice);
      return cachedPrice;
    }

    try {
      const accessToken = this.getAccessToken();
      if (!accessToken) {
        console.error('Không thể lấy access token');
        return null;
      }

      const timestampInSeconds = Math.floor(timestamp / 1000);
      // Cập nhật endpoint cho historical prices
      const url = `${this.BASE_URL}/v2/prices/historical/${this.SYMBOL}?timestamp=${timestampInSeconds}`;
      console.log('Gửi request lấy giá:', url);

      const options = {
        'method': 'get',
        'headers': {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/json'
        },
        'muteHttpExceptions': true
      };

      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseText = response.getContentText();
      
      console.log('Price API Response status:', responseCode);
      console.log('Price API Response body:', responseText);

      if (responseCode !== 200) {
        console.error(`API trả về status code ${responseCode}`);
        return null;
      }

      const data = JSON.parse(responseText);
      if (data.price) {
        console.log('Lấy giá thành công:', data.price);
        this.cachePrice(timestamp, data.price);
        return data.price;
      }
      console.error('Không tìm thấy giá trong response:', data);
      return null;
    } catch (error) {
      console.error('Lỗi khi lấy giá:', error);
      return null;
    }
  }

  getPriceAtTimestamp(timestamp) {
    console.log('Lấy giá cho timestamp:', timestamp);
    const cachedPrice = this.getPriceFromCache(timestamp);
    if (cachedPrice) {
      console.log('Đã tìm thấy giá trong cache:', cachedPrice);
      return cachedPrice;
    }

    try {
      const accessToken = this.getAccessToken();
      if (!accessToken) {
        console.error('Không thể lấy access token');
        return null;
      }

      const timestampInSeconds = Math.floor(timestamp / 1000);
      const url = `${this.BASE_URL}/historical-prices/${this.SYMBOL}?timestamp=${timestampInSeconds}`;
      console.log('Gửi request lấy giá:', url);

      const options = {
        'method': 'get',
        'headers': {
          'Authorization': `Bearer ${accessToken}`
        },
        'muteHttpExceptions': true
      };

      const response = UrlFetchApp.fetch(url, options);
      console.log('Price API Response status:', response.getResponseCode());
      console.log('Price API Response body:', response.getContentText());

      const data = JSON.parse(response.getContentText());
      if (data.price) {
        console.log('Lấy giá thành công:', data.price);
        this.cachePrice(timestamp, data.price);
        return data.price;
      }
      console.error('Không tìm thấy giá trong response');
      return null;
    } catch (error) {
      console.error('Lỗi khi lấy giá:', error);
      return null;
    }
  }

  getPriceFromCache(timestamp) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const cacheSheet = ss.getSheetByName(this.CACHE_SHEET_NAME);
    if (!cacheSheet) return null;

    const data = cacheSheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (Math.abs(data[i][0] - timestamp) < 300000) { // 5 phút
        return data[i][1];
      }
    }
    return null;
  }

  cachePrice(timestamp, price) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let cacheSheet = ss.getSheetByName(this.CACHE_SHEET_NAME);
    
    if (!cacheSheet) {
      cacheSheet = ss.insertSheet(this.CACHE_SHEET_NAME);
      cacheSheet.getRange('A1:B1').setValues([['Timestamp', 'Price']]);
    }
    
    if (!this.getPriceFromCache(timestamp)) {
      cacheSheet.appendRow([timestamp, price]);
    }
  }

  processNewData() {
    console.log('Bắt đầu xử lý dữ liệu...');
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
    if (!sheet) {
      console.error('Không tìm thấy sheet:', CONFIG.SHEET_NAME);
      return;
    }

    const lastRow = sheet.getLastRow();
    console.log('Tổng số dòng:', lastRow);
    
    const scriptProperties = PropertiesService.getScriptProperties();
    let lastProcessedRow = parseInt(scriptProperties.getProperty('LAST_PROCESSED_ROW')) || 1;
    console.log('Dòng cuối đã xử lý:', lastProcessedRow);
    
    if (lastRow > lastProcessedRow) {
      try {
        const newRowsRange = sheet.getRange(lastProcessedRow + 1, 1, lastRow - lastProcessedRow, CONFIG.COLUMNS.TY_GIA);
        const newValues = newRowsRange.getValues();
        
        let updates = [];
        newValues.forEach((row, index) => {
          const currentRow = lastProcessedRow + index + 1;
          const timestamp = row[CONFIG.COLUMNS.ID_TIME - 1]; // Sử dụng ID_TIME
          const mua3s = parseFloat(row[CONFIG.COLUMNS.MUA_3S - 1]);
          const ban3s = parseFloat(row[CONFIG.COLUMNS.BAN_3S - 1]);
          const mua4s = parseFloat(row[CONFIG.COLUMNS.MUA_4S - 1]);
          const ban4s = parseFloat(row[CONFIG.COLUMNS.BAN_4S - 1]);
          const giaTheGioi = row[CONFIG.COLUMNS.GIA_THE_GIOI - 1];
          
          console.log(`Đang xử lý dòng ${currentRow}:`, {
            timestamp,
            mua3s,
            ban3s,
            mua4s,
            ban4s,
            giaTheGioi
          });
          
          if (
            (
              (mua3s && !isNaN(mua3s) && mua3s > 1) ||
              (ban3s && !isNaN(ban3s) && ban3s > 1) ||
              (mua4s && !isNaN(mua4s) && mua4s > 1) ||
              (ban4s && !isNaN(ban4s) && ban4s > 1)
            ) && 
            (!giaTheGioi || giaTheGioi === '-' || giaTheGioi === '')
          ) {
            const price = this.getPriceAtTimestamp(timestamp);
            if (price) {
              updates.push({
                row: currentRow,
                price: price,
                originalValues: {
                  mua3s,
                  ban3s,
                  mua4s,
                  ban4s
                }
              });
            }
          }
        });
        
        if (updates.length > 0) {
          console.log(`Cần cập nhật ${updates.length} dòng`);
          updates.forEach(update => {
            try {
              // Cập nhật giá thế giới
              sheet.getRange(update.row, CONFIG.COLUMNS.GIA_THE_GIOI).setValue(update.price);
              
              // Tính và cập nhật tỷ giá
              const tyGia = this.calculateTyGia(update.originalValues, update.price);
              if (tyGia) {
                sheet.getRange(update.row, CONFIG.COLUMNS.TY_GIA).setValue(tyGia);
              }
              
              console.log(`Đã cập nhật dòng ${update.row}: Giá = ${update.price}, Tỷ giá = ${tyGia}`);
            } catch (error) {
              console.error(`Lỗi khi cập nhật dòng ${update.row}:`, error);
            }
          });
          
          scriptProperties.setProperty('LAST_PROCESSED_ROW', lastRow.toString());
          console.log('Đã cập nhật lastProcessedRow:', lastRow);
        } else {
          console.log('Không có dòng nào cần cập nhật');
        }
      } catch (error) {
        console.error('Lỗi trong quá trình xử lý dữ liệu:', error);
      }
    }
  }

  calculateTyGia(values, giaTheGioi) {
    try {
      const { mua3s, ban3s, mua4s, ban4s } = values;
      let giaVND = 0;
      
      // Lấy giá giao dịch đầu tiên tìm thấy
      if (mua3s > 1) giaVND = mua3s * 1000000;
      else if (ban3s > 1) giaVND = ban3s * 1000000;
      else if (mua4s > 1) giaVND = mua4s * 1000000;
      else if (ban4s > 1) giaVND = ban4s * 1000000;
      
      if (giaVND > 0 && giaTheGioi > 0) {
        const tyGia = giaVND / giaTheGioi;
        console.log(`Tính tỷ giá: ${giaVND} / ${giaTheGioi} = ${tyGia}`);
        return tyGia;
      }
      return null;
    } catch (error) {
      console.error('Lỗi khi tính tỷ giá:', error);
      return null;
    }
  }
}

// Thêm hàm test riêng
function testApiDetails() {
  const service = new SpotwareService();
  
  console.log('=== TEST API DETAILS ===');
  console.log('Current time:', new Date().toISOString());
  console.log('Testing endpoints...');
  
  try {
    const token = service.getAccessToken();
    console.log('Token result:', token ? 'Success' : 'Failed');
    
    if (token) {
      // Test lấy giá
      const currentTimestamp = new Date().getTime();
      console.log('Testing price retrieval...');
      const price = service.getPriceAtTimestamp(currentTimestamp);
      console.log('Price result:', price ? `Success: ${price}` : 'Failed');
    }
  } catch (error) {
    console.error('Test failed with error:', error);
    console.error('Stack trace:', error.stack);
  }
}

file GoldPriceHandler
// Chứa các hàm xử lý liên quan đến giá vàng
function updateGoldPrices() {
  console.log('Bắt đầu cập nhật giá vàng...');
  const service = new SpotwareService();
  service.processNewData();
}

function processAllGoldPrices() {
  console.log('Bắt đầu xử lý toàn bộ dữ liệu...');
  const service = new SpotwareService();
  PropertiesService.getScriptProperties().setProperty('LAST_PROCESSED_ROW', '1');
  service.processNewData();
}

file TriggerManager
// TriggerManager.gs
class TriggerManager {
  constructor() {
    this.ui = SpreadsheetApp.getUi();
    this.spreadsheet = SpreadsheetApp.getActive();
  }

  // Xóa tất cả triggers hiện có
  clearAllTriggers() {
    console.log('Đang xóa tất cả triggers...');
    ScriptApp.getProjectTriggers().forEach(trigger => {
      console.log('Xóa trigger:', trigger.getHandlerFunction());
      ScriptApp.deleteTrigger(trigger);
    });
  }

  // Tạo trigger cho onEdit và onChange
  createEditTriggers() {
    console.log('Đang tạo triggers cho onEdit và onChange...');
    
    // Tạo trigger onEdit
    ScriptApp.newTrigger('onEdit')
      .forSpreadsheet(this.spreadsheet)
      .onEdit()
      .create();
    
    // Tạo trigger onChange
    ScriptApp.newTrigger('onChange')
      .forSpreadsheet(this.spreadsheet)
      .onChange()
      .create();
  }

  // Tạo trigger tự động xử lý dữ liệu mỗi phút
  createTimedTriggers() {
    console.log('Đang tạo triggers định kỳ...');
    
    // Trigger cập nhật giá vàng
    ScriptApp.newTrigger('updateGoldPrices')
      .timeBased()
      .everyMinutes(1)
      .create();
    
    // Trigger reset hàng ngày
    ScriptApp.newTrigger('resetLastProcessedRow')
      .timeBased()
      .atHour(0)
      .everyDays(1)
      .create();
  }

  // Kiểm tra trạng thái triggers
  checkTriggerStatus() {
    const triggers = ScriptApp.getProjectTriggers();
    let status = 'Trạng thái triggers:\n\n';
    
    if (triggers.length === 0) {
      status += '❌ Không có trigger nào đang hoạt động';
    } else {
      status += '✅ Các triggers đang hoạt động:\n';
      triggers.forEach(trigger => {
        status += `- ${trigger.getHandlerFunction()}\n`;
      });
    }
    
    this.ui.alert('Trạng thái', status, this.ui.ButtonSet.OK);
  }

  // Bật tự động xử lý (tất cả triggers)
  enableAutoProcessing() {
    try {
      console.log('Bật tự động xử lý...');
      this.clearAllTriggers();
      this.createEditTriggers();
      this.createTimedTriggers();
      this.ui.alert('Thành công', 'Đã bật tất cả tính năng tự động', this.ui.ButtonSet.OK);
    } catch (error) {
      console.error('Lỗi khi bật tự động:', error);
      this.ui.alert('Lỗi', 'Không thể bật tự động: ' + error.toString(), this.ui.ButtonSet.OK);
    }
  }

  // Tắt tự động xử lý
  disableAutoProcessing() {
    try {
      this.clearAllTriggers();
      this.ui.alert('Thành công', 'Đã tắt tất cả tính năng tự động', this.ui.ButtonSet.OK);
    } catch (error) {
      console.error('Lỗi khi tắt tự động:', error);
      this.ui.alert('Lỗi', 'Không thể tắt tự động: ' + error.toString(), this.ui.ButtonSet.OK);
    }
  }
}

// Hàm reset last processed row
function resetLastProcessedRow() {
  PropertiesService.getScriptProperties().setProperty('LAST_PROCESSED_ROW', '1');
  console.log('Đã reset last processed row');
}

// Các hàm để gọi từ menu
function enableAutomation() {
  const manager = new TriggerManager();
  manager.enableAutoProcessing();
}

function disableAutomation() {
  const manager = new TriggerManager();
  manager.disableAutoProcessing();
}

function checkAutomationStatus() {
  const manager = new TriggerManager();
  manager.checkTriggerStatus();
}

file EventHandlers
function onEdit(e) {
  console.log('=== onEdit Triggered ===');
  console.log('Time:', new Date().toISOString());
  console.log('User:', Session.getActiveUser().getEmail());

  // Kiểm tra sheet
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() !== CONFIG.SHEET_NAME) {
    console.log('Không phải sheet cần xử lý');
    return;
  }

  // Log thông tin về thay đổi
  const range = e.range;
  console.log('Thay đổi tại:', 
    'Hàng:', range.getRow(),
    'Cột:', range.getColumn(),
    'Giá trị mới:', range.getValue());

  // Xử lý ngay khi có thay đổi
  processNewRow(range.getRow());
}

function processNewRow(rowNumber) {
  try {
    console.log('Xử lý hàng mới:', rowNumber);
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
    
    // Lấy dữ liệu của hàng
    const rowData = sheet.getRange(rowNumber, 1, 1, CONFIG.COLUMNS.TY_GIA).getValues()[0];
    const content = rowData[CONFIG.COLUMNS.CONTENT - 1];
    
    if (!content) {
      console.log('Không có nội dung để xử lý');
      return;
    }

    // Xử lý và cập nhật ngay
    const updates = [];
    
    // Xử lý số điện thoại
    const phoneNumber = extractPhoneNumber(content);
    updates.push(phoneNumber);
    
    // Xử lý giá mua bán
    updates.push(classifyMua3s(content) ? extractPrice(content) || '-' : '-');
    updates.push(classifyBan3s(content) ? extractPrice(content) || '-' : '-');
    updates.push(classifyMua4s(content) ? extractPrice(content) || '-' : '-');
    updates.push(classifyBan4s(content) ? extractPrice(content) || '-' : '-');
    
    // Cập nhật kết quả
    sheet.getRange(rowNumber, CONFIG.COLUMNS.PHONE_NUMBER, 1, 5).setValues([updates]);
    
    console.log('Đã cập nhật:', updates);
    
    // Kiểm tra và xử lý giá vàng thế giới
    const hasPrice = updates.slice(1).some(price => price !== '-');
    if (hasPrice) {
      const timestamp = rowData[CONFIG.COLUMNS.ID_TIME - 1];
      const service = new SpotwareService();
      const goldPrice = service.getPriceAtTimestamp(timestamp);
      
      if (goldPrice) {
        sheet.getRange(rowNumber, CONFIG.COLUMNS.GIA_THE_GIOI).setValue(goldPrice);
        
        // Tính tỷ giá
        const values = {
          mua3s: updates[1] !== '-' ? parseFloat(updates[1]) : 0,
          ban3s: updates[2] !== '-' ? parseFloat(updates[2]) : 0,
          mua4s: updates[3] !== '-' ? parseFloat(updates[3]) : 0,
          ban4s: updates[4] !== '-' ? parseFloat(updates[4]) : 0
        };
        
        const tyGia = service.calculateTyGia(values, goldPrice);
        if (tyGia) {
          sheet.getRange(rowNumber, CONFIG.COLUMNS.TY_GIA).setValue(tyGia);
        }
      }
    }
    
    console.log('Hoàn thành xử lý hàng:', rowNumber);

  } catch (error) {
    console.error('Lỗi khi xử lý hàng mới:', error);
  }
}

// Thêm hàm mới để xử lý khi có thay đổi trong sheet
function onChange(e) {
  console.log('=== onChange Triggered ===');
  console.log('Time:', new Date().toISOString());
  
  if (e.changeType === 'INSERT_ROW') {
    console.log('Phát hiện thêm hàng mới');
    const sheet = e.source.getActiveSheet();
    if (sheet.getName() === CONFIG.SHEET_NAME) {
      const lastRow = sheet.getLastRow();
      processNewRow(lastRow);
    }
  }
}

file AutoProcessor
class AutoProcessor {
  constructor() {
    this.sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
    this.scriptProperties = PropertiesService.getScriptProperties();
  }

  checkAndProcessNewRows() {
    if (!this.sheet) {
      console.error('Không tìm thấy sheet');
      return;
    }

    try {
      // Lấy toàn bộ dữ liệu của sheet
      const lastRow = this.sheet.getLastRow();
      if (lastRow <= 1) return; // Không có dữ liệu

      // Lấy ID_TIME cuối cùng đã xử lý
      const lastProcessedIdTime = this.scriptProperties.getProperty(CONFIG.PROPERTIES.LAST_ID_TIME) || '0';
      
      // Lấy tất cả ID_TIME từ sheet
      const idTimeRange = this.sheet.getRange(2, CONFIG.COLUMNS.ID_TIME, lastRow - 1, 1);
      const idTimeValues = idTimeRange.getValues();

      // Tìm các hàng mới
      const newRows = [];
      idTimeValues.forEach((row, index) => {
        const currentIdTime = row[0].toString();
        if (currentIdTime > lastProcessedIdTime) {
          newRows.push({
            rowIndex: index + 2, // +2 vì index bắt đầu từ 0 và sheet bắt đầu từ hàng 2
            idTime: currentIdTime
          });
        }
      });

      if (newRows.length > 0) {
        console.log(`Phát hiện ${newRows.length} hàng mới cần xử lý`);
        this.processNewRows(newRows);
      }

    } catch (error) {
      console.error('Lỗi khi kiểm tra hàng mới:', error);
    }
  }

  processNewRows(newRows) {
    try {
      console.log('Bắt đầu xử lý hàng mới...');
      
      // Xử lý từng hàng mới
      newRows.forEach(row => {
        console.log(`Đang xử lý hàng ${row.rowIndex} với ID_TIME ${row.idTime}`);
        
        // Lấy nội dung của hàng
        const rowData = this.sheet.getRange(row.rowIndex, 1, 1, CONFIG.COLUMNS.TY_GIA).getValues()[0];
        
        // Xử lý số điện thoại và giá
        const content = rowData[CONFIG.COLUMNS.CONTENT - 1];
        const phoneNumber = extractPhoneNumber(content);
        const mua3sPrice = classifyMua3s(content) ? extractPrice(content) : '-';
        const ban3sPrice = classifyBan3s(content) ? extractPrice(content) : '-';
        const mua4sPrice = classifyMua4s(content) ? extractPrice(content) : '-';
        const ban4sPrice = classifyBan4s(content) ? extractPrice(content) : '-';

        // Cập nhật kết quả vào sheet
        this.sheet.getRange(row.rowIndex, CONFIG.COLUMNS.PHONE_NUMBER, 1, 5).setValues([[
          phoneNumber,
          mua3sPrice,
          ban3sPrice,
          mua4sPrice,
          ban4sPrice
        ]]);

        // Xử lý giá vàng thế giới nếu có giá mua bán
        if ((mua3sPrice !== '-' || ban3sPrice !== '-' || mua4sPrice !== '-' || ban4sPrice !== '-')) {
          const service = new SpotwareService();
          const goldPrice = service.getPriceAtTimestamp(row.idTime);
          
          if (goldPrice) {
            this.sheet.getRange(row.rowIndex, CONFIG.COLUMNS.GIA_THE_GIOI).setValue(goldPrice);
            
            // Tính và cập nhật tỷ giá
            const tyGia = service.calculateTyGia({
              mua3s: mua3sPrice !== '-' ? parseFloat(mua3sPrice) : 0,
              ban3s: ban3sPrice !== '-' ? parseFloat(ban3sPrice) : 0,
              mua4s: mua4sPrice !== '-' ? parseFloat(mua4sPrice) : 0,
              ban4s: ban4sPrice !== '-' ? parseFloat(ban4sPrice) : 0
            }, goldPrice);
            
            if (tyGia) {
              this.sheet.getRange(row.rowIndex, CONFIG.COLUMNS.TY_GIA).setValue(tyGia);
            }
          }
        }

        // Cập nhật ID_TIME cuối cùng đã xử lý
        this.scriptProperties.setProperty(CONFIG.PROPERTIES.LAST_ID_TIME, row.idTime);
      });

      console.log('Hoàn thành xử lý hàng mới');

    } catch (error) {
      console.error('Lỗi khi xử lý hàng mới:', error);
    }
  }
}
